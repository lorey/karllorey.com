{"pageProps":{"post":{"title":"Install and run Django completely inside Docker","slug":"install-and-run-django-inside-docker","date":"2020-05-03T11:33:57.000Z","tags":"Django, Docker, Python, Tech","category":"Tech","link":null,"description":null,"type":"text","content":"\nThis guide will show you how to install Django inside Docker with docker-compose\nand without installing any dependencies on the host system.\nSince there are a few quirks and I have to look it up myself every damn time,\nhere's a guide hopefully helping me and other the next time.\n\nThis guide will:\n\n- help you install the newest version of django inside your docker container\n- be independent of your host OS and python version, so you can always get the newest version inside docker\n- provide a basic setup of django inside docker with docker-compose to build upon\n\n# Basic requirements file\n\nStart with a requirements.txt file containing only:\n\n```\ndjango\n```\n\nSave it as `requirements.txt`.\n\n# Basic Dockerfile\n\nFirstly, a Dockerfile is needed to set up and run our project.\nWe'll use a basic version you can expand later.\nIt uses Python 3.8, installs all dependencies from your `requirements.txt` file,\nand then copies your project files into the image.\n\nSo copy this in your `Dockerfile`:\n\n```Dockerfile\nFROM python:3.8\n\nWORKDIR /code\n\n# copy and install requirements first\n# -> speeds up build if requirements haven't changed\nCOPY requirements.txt /code/\nRUN pip install -r requirements.txt\n\n# copy rest of files\n# (not needed since we also mount a volume,\n# but you won't mount in production)\nCOPY . /code/\n```\n\n# Basic docker-compose\n\nIn `docker-compose.yml`:\n\n```yaml\nversion: \"3\"\n\nservices:\n  web:\n    build: .\n    volumes:\n      - .:/code/\n    command: bash\n    tty: True\n    ports:\n      # external is the port you use on your host, i.e. localhost:8000\n      # internal is the port django uses inside the container\n      # format: external:internal\n      - \"8000:8000\"\n```\n\n# Running it all\n\nAfter having set up the above files, run the following steps:\n\n1. Run `docker-compose build` to build the images.\n2. Run `docker-compose up` to start the container, leave it running.\n3. Run `docker-compose exec web pip freeze > requirements.txt` to pin the installed dependencies to their actual version. `requirements.txt` should now contain version numbers.\n4. Run `docker-compose exec web django-admin startproject YOURNAME .` (mind the dot!) to start a new django project in the current directory.\n5. Run `sudo chown -R $USER ./` to own the docker-generated files. Otherwise you'll get file permission problems when working with the generated files on your host (outside of docker).\n6. Run `docker-compose exec web python ./manage.py runserver 0.0.0.0:8000`.\n\nYou should now be able to access a congratulations page at `localhost:8000`.\n\n# Next steps\n\nIf you're interested in setting up Django for production,\nfeel free to check out my guide on\n[how to set up Django deployment for production](http://karllorey.com/posts/django-production-docker-mod-wsgi/) for the same stack.\n\n# Note: Changing ports\n\nIf you want to change the port to access your Django application,\nyou only have to change the external port, i.e. the `docker-compose.yml` file.\nSo to switch to port 80, change the line below `ports:` to\n\n```yaml\nports:\n  - \"80:8000\"\n```\n\nThen the container can be accessed with `localhost:80` or just `localhost` (as 80 is the default).\n"},"mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This guide will show you how to install Django inside Docker with docker-compose\\nand without installing any dependencies on the host system.\\nSince there are a few quirks and I have to look it up myself every damn time,\\nhere's a guide hopefully helping me and other the next time.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This guide will:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"help you install the newest version of django inside your docker container\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"be independent of your host OS and python version, so you can always get the newest version inside docker\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"provide a basic setup of django inside docker with docker-compose to build upon\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Basic requirements file\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Start with a requirements.txt file containing only:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"django\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Save it as \", _jsx(_components.code, {\n        children: \"requirements.txt\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Basic Dockerfile\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Firstly, a Dockerfile is needed to set up and run our project.\\nWe'll use a basic version you can expand later.\\nIt uses Python 3.8, installs all dependencies from your \", _jsx(_components.code, {\n        children: \"requirements.txt\"\n      }), \" file,\\nand then copies your project files into the image.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So copy this in your \", _jsx(_components.code, {\n        children: \"Dockerfile\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-Dockerfile\",\n        children: \"FROM python:3.8\\n\\nWORKDIR /code\\n\\n# copy and install requirements first\\n# -> speeds up build if requirements haven't changed\\nCOPY requirements.txt /code/\\nRUN pip install -r requirements.txt\\n\\n# copy rest of files\\n# (not needed since we also mount a volume,\\n# but you won't mount in production)\\nCOPY . /code/\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Basic docker-compose\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In \", _jsx(_components.code, {\n        children: \"docker-compose.yml\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"version: \\\"3\\\"\\n\\nservices:\\n  web:\\n    build: .\\n    volumes:\\n      - .:/code/\\n    command: bash\\n    tty: True\\n    ports:\\n      # external is the port you use on your host, i.e. localhost:8000\\n      # internal is the port django uses inside the container\\n      # format: external:internal\\n      - \\\"8000:8000\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Running it all\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After having set up the above files, run the following steps:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"docker-compose build\"\n        }), \" to build the images.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"docker-compose up\"\n        }), \" to start the container, leave it running.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"docker-compose exec web pip freeze > requirements.txt\"\n        }), \" to pin the installed dependencies to their actual version. \", _jsx(_components.code, {\n          children: \"requirements.txt\"\n        }), \" should now contain version numbers.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"docker-compose exec web django-admin startproject YOURNAME .\"\n        }), \" (mind the dot!) to start a new django project in the current directory.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"sudo chown -R $USER ./\"\n        }), \" to own the docker-generated files. Otherwise you'll get file permission problems when working with the generated files on your host (outside of docker).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"docker-compose exec web python ./manage.py runserver 0.0.0.0:8000\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You should now be able to access a congratulations page at \", _jsx(_components.code, {\n        children: \"localhost:8000\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Next steps\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you're interested in setting up Django for production,\\nfeel free to check out my guide on\\n\", _jsx(_components.a, {\n        href: \"http://karllorey.com/posts/django-production-docker-mod-wsgi/\",\n        children: \"how to set up Django deployment for production\"\n      }), \" for the same stack.\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Note: Changing ports\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to change the port to access your Django application,\\nyou only have to change the external port, i.e. the \", _jsx(_components.code, {\n        children: \"docker-compose.yml\"\n      }), \" file.\\nSo to switch to port 80, change the line below \", _jsx(_components.code, {\n        children: \"ports:\"\n      }), \" to\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yaml\",\n        children: \"ports:\\n  - \\\"80:8000\\\"\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then the container can be accessed with \", _jsx(_components.code, {\n        children: \"localhost:80\"\n      }), \" or just \", _jsx(_components.code, {\n        children: \"localhost\"\n      }), \" (as 80 is the default).\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}