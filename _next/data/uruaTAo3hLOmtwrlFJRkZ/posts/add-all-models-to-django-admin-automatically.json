{"pageProps":{"post":{"title":"Add all models to Django admin automatically","slug":"add-all-models-to-django-admin-automatically","date":"2020-03-24T10:01:51.000Z","tags":"Python, Django, Tech, Clean Code","category":"Tech","link":null,"description":null,"type":"text","content":"\nTo show, edit, and work with a model inside the Django admin site,\nyou usually have to add each desired model manually by adding a line to `{your app}/admin.py`.\nFor example, to add your `Project` class to your Admin site,\nyou have to add the following to your `admin.py` file:\n\n```python\nfrom django.contrib import admin\nfrom myproject.myapp.models import Project\n\nadmin.site.register(Project)\n```\n\nOver time, especially during development when you create new objects a lot,\nthis can become quite tedious.\nSo I cam up with a quick hack to add all models to your Django admin site automatically.\nInstead of registering all classes manually,\nwe simply use inspection to add all classes of our models module.\nThis is what you need to add to the `admin.py` file inside your app:\n\n```python\nimport inspect\n\nfrom django.contrib import admin\n\nfrom myproject.myapp import models\n\nfor name, obj in inspect.getmembers(models):\n    if inspect.isclass(obj):\n        admin.site.register(obj)\n```\n\nThis code uses inspection to automatically add all classes inside your models.\nNote that you cannot have any other classes inside models withough extending the above code.\nI would recommend to use this during development only\nand add all classes manually in production.\n"},"mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"To show, edit, and work with a model inside the Django admin site,\\nyou usually have to add each desired model manually by adding a line to \", _jsx(_components.code, {\n        children: \"{your app}/admin.py\"\n      }), \".\\nFor example, to add your \", _jsx(_components.code, {\n        children: \"Project\"\n      }), \" class to your Admin site,\\nyou have to add the following to your \", _jsx(_components.code, {\n        children: \"admin.py\"\n      }), \" file:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"from django.contrib import admin\\nfrom myproject.myapp.models import Project\\n\\nadmin.site.register(Project)\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Over time, especially during development when you create new objects a lot,\\nthis can become quite tedious.\\nSo I cam up with a quick hack to add all models to your Django admin site automatically.\\nInstead of registering all classes manually,\\nwe simply use inspection to add all classes of our models module.\\nThis is what you need to add to the \", _jsx(_components.code, {\n        children: \"admin.py\"\n      }), \" file inside your app:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-python\",\n        children: \"import inspect\\n\\nfrom django.contrib import admin\\n\\nfrom myproject.myapp import models\\n\\nfor name, obj in inspect.getmembers(models):\\n    if inspect.isclass(obj):\\n        admin.site.register(obj)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This code uses inspection to automatically add all classes inside your models.\\nNote that you cannot have any other classes inside models withough extending the above code.\\nI would recommend to use this during development only\\nand add all classes manually in production.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}