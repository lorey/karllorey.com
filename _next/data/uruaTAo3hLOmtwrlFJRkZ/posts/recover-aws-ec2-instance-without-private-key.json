{"pageProps":{"post":{"title":"How to recover an AWS EC2 instance without the private key","slug":"recover-aws-ec2-instance-without-private-key","date":"2019-09-03T09:30:13.000Z","tags":"AWS, Tech","category":"Tech","link":null,"description":null,"type":"text","content":"\nLost the private key for your EC2 instance and can't login via ssh anymore?\nThis tutorial will show you how to recover your EC2 instance by setting a new key pair to login.\n\nWhat we'll do:\n\n- mount the original instance's volume (a.k.a. it's filesystem) inside another temporary EC2 instance\n- modify the keys allowed to login\n- unmount the volume from the temporary instance and re-mount it in the original instance\n- login with a new key to your original instance\n\nIn short, this replaces the key needed for ssh to connect with a new one of your choice.\n\n## AWS Recovery Automation\n\nThere's an [Amazon recovery automation thing](https://aws.amazon.com/premiumsupport/knowledge-center/recover-access-lost-key-pair/) available that aims to recover your instance automatically,\nit sadly did not work for me.\nSo here we go.\n\n## Step 1: Find the instance\n\nGo to the AWS EC2 console and find your (lost) instance.\nMake sure you're in the right availability zone.\nNote down the instance ID as well as the subnet.\nAlso note the instance's volume\n\n## Step 2: Create a temporary instance\n\nLaunch an instance in the same availability zone.\nMake sure to use the same subnet.\nCreate a new key pair with that instance\nor use the key pair you'd like to use for your original instance from now on.\n\n## Step 3: Attach the original volume to a temporary instance\n\nStop the original instance to be able to unmount the storage.\nNote the volume ID under `Attachment information`.\nGo to volumes and detach the volume with `Actions - Detach Volume`.\nAttach the volume to the temporary instance with `Actions - Attach Volume`.\nChoose one of the given options and note it down, e.g. `/dev/sdf`.\nConnect to the temporary instance via SSH and mount the volume, e.g. to `/data` via the following command:\n\n```text\nmount /dev/sdf /data\n```\n\nThe volume of the original instance is now mounted to `/data`.\nThis allows us to now modify the allowed keys.\n\n## Step 4: Modify the allowed keys\n\nWe can now set the key of the current, temporary instance as an allowed key of the original instance.\nThe keys allowed to log in are stored in a file called `~/.ssh/authorized_keys` (background on [authorized_keys](https://www.ssh.com/ssh/authorized_keys/)).\nInside this file is just a line-by-line list of authorized keys.\nBecause of this, we can just append the file of our temporary instance (and thus our key from the temporary instance)\nto the file of our original instance.\n\n```text\ncat ~/.ssh/authorized_keys >> /data/home/admin/.ssh/authorized_keys\n```\n\nMake sure to swap admin with the actual user you want to sign in as (check your ssh connection command if you're unsure).\n\n### Check if everything went right\n\n```text\ncat /data/home/admin/.ssh/authorized_keys\n```\n\nshould now contain the contents of:\n\n```text\ncat ~/.ssh/authorized_keys\n```\n\n## Step 4: Bring everything back in order\n\nWe now have set up another key for login.\nAll that's left is to unmount the volume from the temporary instance and mount it to the original instance.\n\nFirst, we have to unmout the storage of the original instance inside the temporary instance by\n`umount /dev/sdf` (make sure to use the right path here).\nAfterwards, you stop the temporary instance via the AWS console under `Instances`.\nYou then attach the volume to the original instance inside the AWS console under `Volumes` via `Actions - Attach volume`.\nType in the original instance ID as well as `xvda` as the mount point.\nOtherwise, you might get an error pointing out that there's no root volume when starting the instance.\nYou can now re-start the original instance and should be able to login with the new key.\n\nMake sure to delete the temporary instance in case everything went well.\n\n## Conclusion\n\nSo this guide showed you how to recover an AWS EC2 instance if you lose you private key.\nWe did this by using a temporary instance to swap or actually extend the authorized_keys file.\nYou should now be able to login to the original instance with your new key.\n\nThere's also a slightly different [guide by AWS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#replacing-lost-key-pair).\n"},"mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Lost the private key for your EC2 instance and can't login via ssh anymore?\\nThis tutorial will show you how to recover your EC2 instance by setting a new key pair to login.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"What we'll do:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"mount the original instance's volume (a.k.a. it's filesystem) inside another temporary EC2 instance\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"modify the keys allowed to login\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"unmount the volume from the temporary instance and re-mount it in the original instance\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"login with a new key to your original instance\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In short, this replaces the key needed for ssh to connect with a new one of your choice.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"AWS Recovery Automation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There's an \", _jsx(_components.a, {\n        href: \"https://aws.amazon.com/premiumsupport/knowledge-center/recover-access-lost-key-pair/\",\n        children: \"Amazon recovery automation thing\"\n      }), \" available that aims to recover your instance automatically,\\nit sadly did not work for me.\\nSo here we go.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 1: Find the instance\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Go to the AWS EC2 console and find your (lost) instance.\\nMake sure you're in the right availability zone.\\nNote down the instance ID as well as the subnet.\\nAlso note the instance's volume\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 2: Create a temporary instance\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Launch an instance in the same availability zone.\\nMake sure to use the same subnet.\\nCreate a new key pair with that instance\\nor use the key pair you'd like to use for your original instance from now on.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 3: Attach the original volume to a temporary instance\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Stop the original instance to be able to unmount the storage.\\nNote the volume ID under \", _jsx(_components.code, {\n        children: \"Attachment information\"\n      }), \".\\nGo to volumes and detach the volume with \", _jsx(_components.code, {\n        children: \"Actions - Detach Volume\"\n      }), \".\\nAttach the volume to the temporary instance with \", _jsx(_components.code, {\n        children: \"Actions - Attach Volume\"\n      }), \".\\nChoose one of the given options and note it down, e.g. \", _jsx(_components.code, {\n        children: \"/dev/sdf\"\n      }), \".\\nConnect to the temporary instance via SSH and mount the volume, e.g. to \", _jsx(_components.code, {\n        children: \"/data\"\n      }), \" via the following command:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"mount /dev/sdf /data\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The volume of the original instance is now mounted to \", _jsx(_components.code, {\n        children: \"/data\"\n      }), \".\\nThis allows us to now modify the allowed keys.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 4: Modify the allowed keys\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can now set the key of the current, temporary instance as an allowed key of the original instance.\\nThe keys allowed to log in are stored in a file called \", _jsx(_components.code, {\n        children: \"~/.ssh/authorized_keys\"\n      }), \" (background on \", _jsx(_components.a, {\n        href: \"https://www.ssh.com/ssh/authorized_keys/\",\n        children: \"authorized_keys\"\n      }), \").\\nInside this file is just a line-by-line list of authorized keys.\\nBecause of this, we can just append the file of our temporary instance (and thus our key from the temporary instance)\\nto the file of our original instance.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"cat ~/.ssh/authorized_keys >> /data/home/admin/.ssh/authorized_keys\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure to swap admin with the actual user you want to sign in as (check your ssh connection command if you're unsure).\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Check if everything went right\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"cat /data/home/admin/.ssh/authorized_keys\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"should now contain the contents of:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"cat ~/.ssh/authorized_keys\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 4: Bring everything back in order\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We now have set up another key for login.\\nAll that's left is to unmount the volume from the temporary instance and mount it to the original instance.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, we have to unmout the storage of the original instance inside the temporary instance by\\n\", _jsx(_components.code, {\n        children: \"umount /dev/sdf\"\n      }), \" (make sure to use the right path here).\\nAfterwards, you stop the temporary instance via the AWS console under \", _jsx(_components.code, {\n        children: \"Instances\"\n      }), \".\\nYou then attach the volume to the original instance inside the AWS console under \", _jsx(_components.code, {\n        children: \"Volumes\"\n      }), \" via \", _jsx(_components.code, {\n        children: \"Actions - Attach volume\"\n      }), \".\\nType in the original instance ID as well as \", _jsx(_components.code, {\n        children: \"xvda\"\n      }), \" as the mount point.\\nOtherwise, you might get an error pointing out that there's no root volume when starting the instance.\\nYou can now re-start the original instance and should be able to login with the new key.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure to delete the temporary instance in case everything went well.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So this guide showed you how to recover an AWS EC2 instance if you lose you private key.\\nWe did this by using a temporary instance to swap or actually extend the authorized_keys file.\\nYou should now be able to login to the original instance with your new key.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There's also a slightly different \", _jsx(_components.a, {\n        href: \"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#replacing-lost-key-pair\",\n        children: \"guide by AWS\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}