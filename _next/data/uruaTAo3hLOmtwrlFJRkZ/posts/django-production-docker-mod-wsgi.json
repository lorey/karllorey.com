{"pageProps":{"post":{"title":"Django in Production with mod_wsgi and Docker","slug":"django-production-docker-mod-wsgi","date":"2020-01-17T09:30:13.000Z","tags":"Django, Python, Docker, Tech","category":"Tech","link":null,"description":null,"type":"text","content":"\nThis article will show you how to run Django in production with docker and apache2/mod_wsgi.\nWhile there are several guides on how to do it,\nI found no simple enough tutorial on how to do it\nsince all of the existing solutions require a lot of configuration or a custom docker image.\nThe solution I found is way quicker and requires close to no configuration.\n\nGuides I found:\n\n- [Django with Apache and mod_wsgi](https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/modwsgi/) assumes you have installed everything already and requires configuration possibly unnecessary for a dockerized version\n- [mod_wsgi](https://modwsgi.readthedocs.io/en/develop/) explains how to install mod_wsgi, but not how to use Django with it\n\nSo, let's do this.\nIf you just want to see the final Dockerfile, scroll to the end of the article :)\n\n## Prerequisites\n\nI assume you have some Dockerfile with Django application setup\nand run Django via the command that spins up the development server:\n\n```dockerfile\nFROM python:3.6\n\nWORKDIR /code/\n\n# copy and install requirements first to leverage caching\nCOPY requirements.txt /code/\nRUN pip install -r requirements.txt\n\n# copy the actual code\nCOPY . /code/\n\nCMD ./manage.py runserver 0.0.0.0:8000\n```\n\n## Step 1: Install Apache\n\nWe basically need a working Apache setup to run python code via mod_wsgi.\nSo in our Dockerfile, we need to install apache2 and apache2-dev.\n\n```dockerfile\nRUN apt-get install apache2 apache2-dev\n```\n\n## Step 2: install mod_wsgi\n\nWe want to run our project within a container.\nThe mod_wsgi documentation says the easiest and preferred using docker\nis to use mod_wsgi-express as it does not require any configuration.\nmod_wsgi-express can be used as a command after you have installed it via pip.\nSo we need to add:\n\n```dockerfile\nRUN pip install mod_wsgi\n```\n\n## Step 3: run Django inside Apache with mod_wsgi\n\nLastly, we simply have to run mod_wsgi-express\nwhich will start an apache instance with our Django project.\nThis can be achieved via:\n\n```text\nmod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data\n```\n\nThe wsgi.py file is auto-generated by Django's `startproject` command and inside you app's folder,\ni.e. `django-project/project_name`.\nSo, to run our project within Apache after we've set-up everything in the Dockerfile,\nwe have to add a `CMD` command at the end of the Dockerfile:\n\n```dockerfile\nCMD mod_wsgi-express start-server /code/connect_web/wsgi.py --user www-data --group www-data\n```\n\nThe `--user` and `--group` parameters make sure Apache isn't run as root which results in errors.\nIf you want to find out, just run the command without them.\n\n## Final Dockerfile: Installing and running Apache and mod_wsgi within Docker\n\nYour final Dockerfile should now look like this:\n\n```dockerfile\nFROM python:3.6\n\n# update packages\nRUN apt-get -qq update\nRUN apt-get install --yes apache2 apache2-dev\nRUN pip install mod_wsgi\n\nRUN mkdir /code\nWORKDIR /code\n\nCOPY . /code/\n\nCMD mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data\n```\n\n## Troubleshooting\n\nIf you have any problems, check the logs. Their locations are outputted when starting the container:\n\n```text\nweb_1     | Server URL         : http://localhost:8000/\nweb_1     | Server Root        : /tmp/mod_wsgi-localhost:8000:0\nweb_1     | Server Conf        : /tmp/mod_wsgi-localhost:8000:0/httpd.conf\nweb_1     | Error Log File     : /tmp/mod_wsgi-localhost:8000:0/error_log (warn)\nweb_1     | Request Capacity   : 5 (1 process * 5 threads)\nweb_1     | Request Timeout    : 60 (seconds)\nweb_1     | Startup Timeout    : 15 (seconds)\nweb_1     | Queue Backlog      : 100 (connections)\nweb_1     | Queue Timeout      : 45 (seconds)\nweb_1     | Server Capacity    : 20 (event/worker), 20 (prefork)\nweb_1     | Server Backlog     : 500 (connections)\nweb_1     | Locale Setting     : en_US.UTF-8\n```\n\nIf you want to monitor them, just `tail -f` them:\n\n```text\ntail -f /tmp/mod_wsgi-localhost:8000:0/error_log\n```\n\n### Permission problems\n\nAt first, I got an `Internal Server Error` when opening the page on my machine.\nAfter checking the logs as described above, mod_wsgi seemed to have problems with file permissions on `.logs/debug.log`.\nA simple `chown www-data /code/.logs/debug.log` from within the container\nwhich makes www-data the owner of the file solved it for me.\n"},"mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This article will show you how to run Django in production with docker and apache2/mod_wsgi.\\nWhile there are several guides on how to do it,\\nI found no simple enough tutorial on how to do it\\nsince all of the existing solutions require a lot of configuration or a custom docker image.\\nThe solution I found is way quicker and requires close to no configuration.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Guides I found:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/modwsgi/\",\n          children: \"Django with Apache and mod_wsgi\"\n        }), \" assumes you have installed everything already and requires configuration possibly unnecessary for a dockerized version\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://modwsgi.readthedocs.io/en/develop/\",\n          children: \"mod_wsgi\"\n        }), \" explains how to install mod_wsgi, but not how to use Django with it\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, let's do this.\\nIf you just want to see the final Dockerfile, scroll to the end of the article :)\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prerequisites\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I assume you have some Dockerfile with Django application setup\\nand run Django via the command that spins up the development server:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"FROM python:3.6\\n\\nWORKDIR /code/\\n\\n# copy and install requirements first to leverage caching\\nCOPY requirements.txt /code/\\nRUN pip install -r requirements.txt\\n\\n# copy the actual code\\nCOPY . /code/\\n\\nCMD ./manage.py runserver 0.0.0.0:8000\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 1: Install Apache\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We basically need a working Apache setup to run python code via mod_wsgi.\\nSo in our Dockerfile, we need to install apache2 and apache2-dev.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"RUN apt-get install apache2 apache2-dev\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 2: install mod_wsgi\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We want to run our project within a container.\\nThe mod_wsgi documentation says the easiest and preferred using docker\\nis to use mod_wsgi-express as it does not require any configuration.\\nmod_wsgi-express can be used as a command after you have installed it via pip.\\nSo we need to add:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"RUN pip install mod_wsgi\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Step 3: run Django inside Apache with mod_wsgi\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Lastly, we simply have to run mod_wsgi-express\\nwhich will start an apache instance with our Django project.\\nThis can be achieved via:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The wsgi.py file is auto-generated by Django's \", _jsx(_components.code, {\n        children: \"startproject\"\n      }), \" command and inside you app's folder,\\ni.e. \", _jsx(_components.code, {\n        children: \"django-project/project_name\"\n      }), \".\\nSo, to run our project within Apache after we've set-up everything in the Dockerfile,\\nwe have to add a \", _jsx(_components.code, {\n        children: \"CMD\"\n      }), \" command at the end of the Dockerfile:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"CMD mod_wsgi-express start-server /code/connect_web/wsgi.py --user www-data --group www-data\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"--user\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"--group\"\n      }), \" parameters make sure Apache isn't run as root which results in errors.\\nIf you want to find out, just run the command without them.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Final Dockerfile: Installing and running Apache and mod_wsgi within Docker\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Your final Dockerfile should now look like this:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"FROM python:3.6\\n\\n# update packages\\nRUN apt-get -qq update\\nRUN apt-get install --yes apache2 apache2-dev\\nRUN pip install mod_wsgi\\n\\nRUN mkdir /code\\nWORKDIR /code\\n\\nCOPY . /code/\\n\\nCMD mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Troubleshooting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you have any problems, check the logs. Their locations are outputted when starting the container:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"web_1     | Server URL         : http://localhost:8000/\\nweb_1     | Server Root        : /tmp/mod_wsgi-localhost:8000:0\\nweb_1     | Server Conf        : /tmp/mod_wsgi-localhost:8000:0/httpd.conf\\nweb_1     | Error Log File     : /tmp/mod_wsgi-localhost:8000:0/error_log (warn)\\nweb_1     | Request Capacity   : 5 (1 process * 5 threads)\\nweb_1     | Request Timeout    : 60 (seconds)\\nweb_1     | Startup Timeout    : 15 (seconds)\\nweb_1     | Queue Backlog      : 100 (connections)\\nweb_1     | Queue Timeout      : 45 (seconds)\\nweb_1     | Server Capacity    : 20 (event/worker), 20 (prefork)\\nweb_1     | Server Backlog     : 500 (connections)\\nweb_1     | Locale Setting     : en_US.UTF-8\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to monitor them, just \", _jsx(_components.code, {\n        children: \"tail -f\"\n      }), \" them:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-text\",\n        children: \"tail -f /tmp/mod_wsgi-localhost:8000:0/error_log\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Permission problems\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At first, I got an \", _jsx(_components.code, {\n        children: \"Internal Server Error\"\n      }), \" when opening the page on my machine.\\nAfter checking the logs as described above, mod_wsgi seemed to have problems with file permissions on \", _jsx(_components.code, {\n        children: \".logs/debug.log\"\n      }), \".\\nA simple \", _jsx(_components.code, {\n        children: \"chown www-data /code/.logs/debug.log\"\n      }), \" from within the container\\nwhich makes www-data the owner of the file solved it for me.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}