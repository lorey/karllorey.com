{"pageProps":{"post":{"title":"Switching from Nikola to Gatsby (static site generators)","slug":"switch-from-nikola-to-gatsby","date":"2022-03-10T16:03:35.000Z","tags":"Python, Lektor, Nikola, Tech, Gatsby, Javascript","category":"Tech","link":null,"description":null,"type":"text","content":"<p>Interestingly, exactly two years after <a href=\"/posts/switch-from-lektor-to-nikola\">migrating from Python-based Lektor to Python-based Nikola</a>\nwith this blog, I'm migrating to JS-based Gatsby.\nSince the page was becoming out of date\nand after successfully building <a href=\"https://loreyventures.com\">my company's page</a> with Gatsby in just a few hours,\nI thought why not try it with this page and a little more data.</p>\n<h2>The good</h2>\n<p>The conversion of the pages was finished really quickly.\nAlso converting the existing static CSS-based design over to tailwind was fun and made things much more structured\nwhile keeping the layout 95% the same.\nOverall, Gatsby with its static site generation gives you the best of both worlds:\nOne the one side modern frontend capabilities with React, Tailwind, and other modules,\non the other side strong SEO through static site generation.\nFinally, the deployment was done within minutes just by setting up Github Actions.</p>\n<h2>The bad</h2>\n<p>After converting layouts and pages, I started with the blog.\nSince Gatsby provides much of its functionality via an GraphQL-based data layer,\nyou need to integrate your existing data into it as well to leverage core functionality.\nAs long as you keep the data simple, that's quite convenient and quickly done,\nbut as soon as you have customized objects,\nit becomes really cumbersome.\nFor example, Lektor supported Markdown frontmatters with the draft status.\nTo replicate this in Gatsby took me more time than necessary by adapting page generation and filtering blog entries.\nAn explanation much better than the one I can provide,\ncan be found at Jared Palmer's <a href=\"https://jaredpalmer.com/gatsby-vs-nextjs\">Gatsby vs. NextJS</a>.</p>\n<h2>The ugly</h2>\n<p>Maybe it is just me being not that experienced in the Javascript world,\nbut I feel the integration of data with GraphQL forces you to repeat filtering logic quickly in different components.\nAlso, that integration basically resulting in a shared data antipattern\nas data is accessed from each component directly.\nWhich will result in having to change several components\nif you change something in the data.\nFor small projects this is not an issue, but for bigger projects I don't see a quick fix.\nAs recommended in the article linked above, I'll look into NextJS next (pun not intended).</p>\n"}},"__N_SSG":true}