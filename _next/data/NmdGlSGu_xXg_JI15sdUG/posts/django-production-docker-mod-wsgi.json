{"pageProps":{"post":{"title":"Django in Production with mod_wsgi and Docker","slug":"django-production-docker-mod-wsgi","date":"2020-01-17T09:30:13.000Z","tags":"Django, Python, Docker, Tech","category":"Tech","link":null,"description":null,"type":"text","content":"<p>This article will show you how to run Django in production with docker and apache2/mod_wsgi.\nWhile there are several guides on how to do it,\nI found no simple enough tutorial on how to do it\nsince all of the existing solutions require a lot of configuration or a custom docker image.\nThe solution I found is way quicker and requires close to no configuration.</p>\n<p>Guides I found:</p>\n<ul>\n<li><a href=\"https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/modwsgi/\">Django with Apache and mod_wsgi</a> assumes you have installed everything already and requires configuration possibly unnecessary for a dockerized version</li>\n<li><a href=\"https://modwsgi.readthedocs.io/en/develop/\">mod_wsgi</a> explains how to install mod_wsgi, but not how to use Django with it</li>\n</ul>\n<p>So, let's do this.\nIf you just want to see the final Dockerfile, scroll to the end of the article :)</p>\n<h2>Prerequisites</h2>\n<p>I assume you have some Dockerfile with Django application setup\nand run Django via the command that spins up the development server:</p>\n<pre><code>FROM python:3.6\n\nWORKDIR /code/\n\n# copy and install requirements first to leverage caching\nCOPY requirements.txt /code/\nRUN pip install -r requirements.txt\n\n# copy the actual code\nCOPY . /code/\n\nCMD ./manage.py runserver 0.0.0.0:8000\n</code></pre>\n<h2>Step 1: Install Apache</h2>\n<p>We basically need a working Apache setup to run python code via mod_wsgi.\nSo in our Dockerfile, we need to install apache2 and apache2-dev.</p>\n<pre><code>RUN apt-get install apache2 apache2-dev\n</code></pre>\n<h2>Step 2: install mod_wsgi</h2>\n<p>We want to run our project within a container.\nThe mod_wsgi documentation says the easiest and preferred using docker\nis to use mod_wsgi-express as it does not require any configuration.\nmod_wsgi-express can be used as a command after you have installed it via pip.\nSo we need to add:</p>\n<pre><code>RUN pip install mod_wsgi\n</code></pre>\n<h2>Step 3: run Django inside Apache with mod_wsgi</h2>\n<p>Lastly, we simply have to run mod_wsgi-express\nwhich will start an apache instance with our Django project.\nThis can be achieved via:</p>\n<pre><code>mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data\n</code></pre>\n<p>The wsgi.py file is auto-generated by Django's <code>startproject</code> command and inside you app's folder,\ni.e. <code>django-project/project_name</code>.\nSo, to run our project within Apache after we've set-up everything in the Dockerfile,\nwe have to add a <code>CMD</code> command at the end of the Dockerfile:</p>\n<pre><code>CMD mod_wsgi-express start-server /code/connect_web/wsgi.py --user www-data --group www-data\n</code></pre>\n<p>The <code>--user</code> and <code>--group</code> parameters make sure Apache isn't run as root which results in errors.\nIf you want to find out, just run the command without them.</p>\n<h2>Final Dockerfile: Installing and running Apache and mod_wsgi within Docker</h2>\n<p>Your final Dockerfile should now look like this:</p>\n<pre><code>FROM python:3.6\n\n# update packages\nRUN apt-get -qq update\nRUN apt-get install --yes apache2 apache2-dev\nRUN pip install mod_wsgi\n\nRUN mkdir /code\nWORKDIR /code\n\nCOPY . /code/\n\nCMD mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data\n</code></pre>\n<h2>Troubleshooting</h2>\n<p>If you have any problems, check the logs. Their locations are outputted when starting the container:</p>\n<pre><code>web_1     | Server URL         : http://localhost:8000/\nweb_1     | Server Root        : /tmp/mod_wsgi-localhost:8000:0\nweb_1     | Server Conf        : /tmp/mod_wsgi-localhost:8000:0/httpd.conf\nweb_1     | Error Log File     : /tmp/mod_wsgi-localhost:8000:0/error_log (warn)\nweb_1     | Request Capacity   : 5 (1 process * 5 threads)\nweb_1     | Request Timeout    : 60 (seconds)\nweb_1     | Startup Timeout    : 15 (seconds)\nweb_1     | Queue Backlog      : 100 (connections)\nweb_1     | Queue Timeout      : 45 (seconds)\nweb_1     | Server Capacity    : 20 (event/worker), 20 (prefork)\nweb_1     | Server Backlog     : 500 (connections)\nweb_1     | Locale Setting     : en_US.UTF-8\n</code></pre>\n<p>If you want to monitor them, just <code>tail -f</code> them:</p>\n<pre><code>tail -f /tmp/mod_wsgi-localhost:8000:0/error_log\n</code></pre>\n<h3>Permission problems</h3>\n<p>At first, I got an <code>Internal Server Error</code> when opening the page on my machine.\nAfter checking the logs as described above, mod_wsgi seemed to have problems with file permissions on <code>.logs/debug.log</code>.\nA simple <code>chown www-data /code/.logs/debug.log</code> from within the container\nwhich makes www-data the owner of the file solved it for me.</p>\n"}},"__N_SSG":true}