{"pageProps":{"post":{"title":"Keeping Pandas DataFrames clean when importing JSON (with Context Managers)","slug":"keeping-pandas-dataframes-clean-importing-json","date":"2019-03-03T09:30:13.000Z","tags":"Machine Learning, Pandas, Clean Code, Python, Tech","category":"Tech","link":null,"description":null,"type":"text","content":"<p>For work, I do a lot of data analysis to find the most promising young startups.\nAs a first step, you always have to import the desired data into a Pandas DataFrame\nand do some preprocessing, for example by importing JSON data from some API.Â \nWhen doing this kind of pre-processing,\nyou usually have a lot of temporary columns in your DataFrame that get imported but need to be dropped later in the process.\nTo deal with these temporary columns,\nI built a custom Context Manager that keeps track of all imported columns\nand deletes them when you're done.\nThis way, your code stays lean and you don't have to remove temporary columns yourself.\nIn this short article, I will show how you can keep your pre-processing clean\nand use a Python ContextManager to clean up temporary columns.</p>\n<p>In this example I will use the actual code I use for importing data from the API of our CRM named Hubspot.\nWhat I retrieve is a list of companies stored as a list of Python dictionaries.\nTo import a list of dictionaries in pandas you basically do:</p>\n<pre><code>from pandas.io.json import json_normalize\n\ndf = json_normalize(data)\n</code></pre>\n<p>The json_normalize function generates a clean DataFrame based on the given <code>data</code> parameter and normalizes the hierarchy so you get clean column names.\nThis is especially useful for nested dictionaries.</p>\n<h2>Ugly: Keeping imported columns</h2>\n<p>The problem with json_normalize is that you usually only want a subset of the imported columns,\nmostly with different names or some kind of pre-processing, too.\nSo you might be tempted to do something like this:</p>\n<pre><code>from pandas.io.json import json_normalize\n\ndf = json_normalize(data)\n\ndf['company_id'] = df['companyId']\ndf['location'] = df['properties.city.value']\ndf['name'] = df['properties.name.value']\ndf['domain'] = df['properties.website.value']\n//..apply(), .as_type(int), whatever...\n</code></pre>\n<p>This works, but keeps all the imported columns inplace and might take a lot of storage.\nSo what can you do?</p>\n<h2>Ugly: Dropping columns manually</h2>\n<p>So after importing, you want to get rid of all temporary columns from the import.\nTo do this, you have to either select the columns you want or drop all columns you don't want.\nIn both cases, you have to somehow keep track of the temporary columns or the ones you want to keep.\nTo deal with this, one solution would be to prefix temporary columns and delete them afterwards:</p>\n<pre><code>from pandas.io.json import json_normalize\n\ndf = json_normalize(data)\n\n// make temporary columns\ndf.columns = ['temp_' + c for c in df.columns]\n\n// pre-processing, basic calculations, etc.\ndf['company_id'] = df['temp_companyId']\ndf['location'] = df['temp_properties.city.value']\ndf['name'] = df['temp_properties.name.value']\ndf['domain'] = df['temp_properties.website.value']\n//..apply(), .as_type(int), whatever...\n</code></pre>\n<p>Afterwards, you would then select all desired columns or drop all undesired columns.</p>\n<pre><code>df.drop([c for c in df.columns if c.startswith('temp_')], axis=1, inplace=True)\n// or\ndf = df[[c for c in df.columns if not c.startswith('temp_')]]\n</code></pre>\n<p>While this works, it feels bloated and inefficient.\nYou have to prefix all the value names in the code which results in bloated column names.\nYou also have to keep track of column names you want in the end\nor the used prefix in different places.\nJust imagine you have to change the prefix <code>temp_</code> one day or make the code work with a different prefix.</p>\n<h2>Clean and easy: using a Context Manager</h2>\n<p>After having used the above methods for some time, it struck me that <a href=\"https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/\">Python Context Managers</a> might be a cleaner solution.\nYou might know them from their most popular application <code>with open() as file:</code>.\nIf not, please take a few minutes to read more about them.\nTo make things short: They basically ensure that something, usually a cleanup, is executed in each exit scenario,\nwhether it is a usual exit like a return or an exception.\nI thought I might use this to build a clean solution that keeps track and gets rid of temporary columns.\nSo I built a Context Manager that deals with temporary columns when importing JSON data so I don't have to.\nYou can basically use it like this:</p>\n<pre><code>with DataFrameFromDict(companies) as df:\n    // imported dict now in df, same result as json_normalize\n    df['company_id'] = df['companyId']\n    df['location'] = df['properties.city.value']\n    df['name'] = df['properties.name.value']\n    df['domain'] = df['properties.website.value']\n// after context exits, df contains company_id, location, name, and domain\n// but no more temporary columns\nprint(df)\n</code></pre>\n<p>The benefit: You don't have to keep track anymore and the context manager handles the deletion of all temporary columns.</p>\n<h2>How it works</h2>\n<p>You can just copy and paste the following snippet to get going, I'll explain how it works below:</p>\n<pre><code>class DataFrameFromDict(object):\n    \"\"\"\n    Temporarily imports data frame columns and deletes them afterwards.\n    \"\"\"\n\n    def __init__(self, data):\n        self.df = json_normalize(data)\n        self.columns = list(self.df.columns.values)\n\n    def __enter__(self):\n        return self.df\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.df.drop([c for c in self.columns], axis=1, inplace=True)\n</code></pre>\n<p>When opening the context, <code>__init__</code> and <code>__enter__</code> get called.\nThey create the DataFrame and remember all imported and thus temporary column names.\nWhen the context is exited, <code>__exit__</code> makes sure to drop all previously created columns\nand leaves only the newly created columns behind.</p>\n<p>Hope this helps you to create a clean pre-processing pipeline.\nLet me know what you think.\nYou can find the <a href=\"https://gist.github.com/lorey/2b57b4ebfec4d45221e15a49060f80d2\">code on GitHub</a>.</p>\n<p>Further reading:</p>\n<ul>\n<li><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.io.json.json_normalize.html\">json_normalize</a></li>\n<li><a href=\"https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/\">Python Context Managers</a></li>\n</ul>\n"}},"__N_SSG":true}