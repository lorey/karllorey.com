{"pageProps":{"post":{"title":"Install and run Django completely inside Docker","slug":"install-and-run-django-inside-docker","date":"2020-05-03T11:33:57.000Z","tags":"Django, Docker, Python, Tech","category":"Tech","link":null,"description":null,"type":"text","content":"<p>This guide will show you how to install Django inside Docker with docker-compose\nand without installing any dependencies on the host system.\nSince there are a few quirks and I have to look it up myself every damn time,\nhere's a guide hopefully helping me and other the next time.</p>\n<p>This guide will:</p>\n<ul>\n<li>help you install the newest version of django inside your docker container</li>\n<li>be independent of your host OS and python version, so you can always get the newest version inside docker</li>\n<li>provide a basic setup of django inside docker with docker-compose to build upon</li>\n</ul>\n<h1>Basic requirements file</h1>\n<p>Start with a requirements.txt file containing only:</p>\n<pre><code>django\n</code></pre>\n<p>Save it as <code>requirements.txt</code>.</p>\n<h1>Basic Dockerfile</h1>\n<p>Firstly, a Dockerfile is needed to set up and run our project.\nWe'll use a basic version you can expand later.\nIt uses Python 3.8, installs all dependencies from your <code>requirements.txt</code> file,\nand then copies your project files into the image.</p>\n<p>So copy this in your <code>Dockerfile</code>:</p>\n<pre><code>FROM python:3.8\n\nWORKDIR /code\n\n# copy and install requirements first \n# -> speeds up build if requirements haven't changed\nCOPY requirements.txt /code/\nRUN pip install -r requirements.txt\n\n# copy rest of files\n# (not needed since we also mount a volume, \n# but you won't mount in production)\nCOPY . /code/\n</code></pre>\n<h1>Basic docker-compose</h1>\n<p>In <code>docker-compose.yml</code>:</p>\n<pre><code>version: '3'\n\nservices:\n  web:\n    build: .\n    volumes:\n      - .:/code/\n    command: bash\n    tty: True\n    ports:\n    # external is the port you use on your host, i.e. localhost:8000\n    # internal is the port django uses inside the container\n    # format: external:internal \n    - \"8000:8000\"\n</code></pre>\n<h1>Running it all</h1>\n<p>After having set up the above files, run the following steps:</p>\n<ol>\n<li>Run <code>docker-compose build</code> to build the images.</li>\n<li>Run <code>docker-compose up</code> to start the container, leave it running.</li>\n<li>Run <code>docker-compose exec web pip freeze > requirements.txt</code> to pin the installed dependencies to their actual version. <code>requirements.txt</code> should now contain version numbers.</li>\n<li>Run <code>docker-compose exec web django-admin startproject YOURNAME .</code> (mind the dot!) to start a new django project in the current directory.</li>\n<li>Run <code>sudo chown -R $USER ./</code> to own the docker-generated files. Otherwise you'll get file permission problems when working with the generated files on your host (outside of docker).</li>\n<li>Run <code>docker-compose exec web python ./manage.py runserver 0.0.0.0:8000</code>.</li>\n</ol>\n<p>You should now be able to access a congratulations page at <code>localhost:8000</code>.</p>\n<h1>Next steps</h1>\n<p>If you're interested in setting up Django for production,\nfeel free to check out my guide on\n<a href=\"http://karllorey.com/posts/django-production-docker-mod-wsgi/\">how to set up Django deployment for production</a> for the same stack.</p>\n<h1>Note: Changing ports</h1>\n<p>If you want to change the port to access your Django application,\nyou only have to change the external port, i.e. the <code>docker-compose.yml</code> file.\nSo to switch to port 80, change the line below <code>ports:</code> to</p>\n<pre><code>ports:\n- \"80:8000\"\n</code></pre>\n<p>Then the container can be accessed with <code>localhost:80</code> or just <code>localhost</code> (as 80 is the default).</p>\n"}},"__N_SSG":true}