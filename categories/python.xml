<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Karl Lorey (Posts about Python)</title><link>https://karllorey.com/</link><description></description><atom:link rel="self" href="https://karllorey.com/categories/python.xml" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:hello@karllorey.com"&gt;Karl Lorey&lt;/a&gt; </copyright><lastBuildDate>Mon, 04 May 2020 09:56:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Install and run Django completely inside Docker</title><link>https://karllorey.com/posts/install-and-run-django-inside-docker/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;This guide will show you how to install Django inside Docker with docker-compose 
and without installing any dependencies on the host system.
Since there are a few quirks and I have to look it up myself every damn time,
here's a guide hopefully helping me and other the next time.&lt;/p&gt;
&lt;p&gt;This guide will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;help you install the newest version of django inside your docker container&lt;/li&gt;
&lt;li&gt;be independent of your host OS and python version, so you can always get the newest version inside docker&lt;/li&gt;
&lt;li&gt;provide a basic setup of django inside docker with docker-compose to build upon
&lt;p&gt;&lt;a href="https://karllorey.com/posts/install-and-run-django-inside-docker/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><category>Django</category><category>Docker</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/install-and-run-django-inside-docker/</guid><pubDate>Sun, 03 May 2020 11:33:57 GMT</pubDate></item><item><title>Add all models to Django admin automatically</title><link>https://karllorey.com/posts/add-all-models-to-django-admin-automatically/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;To show, edit, and work with a model inside the Django admin site,
you usually have to add each desired model manually by adding a line to &lt;code&gt;{your app}/admin.py&lt;/code&gt;.
For example, to add your &lt;code&gt;Project&lt;/code&gt; class to your Admin site, 
you have to add the following to your &lt;code&gt;admin.py&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myproject.myapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Over time, especially during development when you create new objects a lot,
this can become quite tedious.
So I cam up with a quick hack to add all models to your Django admin site automatically.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://karllorey.com/posts/add-all-models-to-django-admin-automatically/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Clean Code</category><category>Django</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/add-all-models-to-django-admin-automatically/</guid><pubDate>Tue, 24 Mar 2020 10:01:51 GMT</pubDate></item><item><title>Switching from Lektor to Nikola (static site generators)</title><link>https://karllorey.com/posts/switch-from-lektor-to-nikola/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;I decided to migrate this website/blog from Lektor to Nikola.
Both are static site generators 
implemented in Python 
that allow you to generate a static, secure, and maintenance-free website/blog.
Here is my experience, why I did it, how to do it, and what to expect.
In short: While I liked Lektor for its simplicity,
it lacked several features I needed.
So far, Nikola has these features and many more
which is why I'm very happy to have switched.
Read the rest of the pros and cons here.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://karllorey.com/posts/switch-from-lektor-to-nikola/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Lektor</category><category>Nikola</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/switch-from-lektor-to-nikola/</guid><pubDate>Tue, 10 Mar 2020 16:03:35 GMT</pubDate></item><item><title>Django in Production with mod_wsgi and Docker</title><link>https://karllorey.com/posts/django-production-docker-mod-wsgi/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;This article will show you how to run Django in production with docker and apache2/mod_wsgi.
While there are several guides on how to do it,
I found no simple enough tutorial on how to do it
since all of the existing solutions require a lot of configuration or a custom docker image.
The solution I found is way quicker and requires close to no configuration.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://karllorey.com/posts/django-production-docker-mod-wsgi/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Django</category><category>Docker</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/django-production-docker-mod-wsgi/</guid><pubDate>Fri, 17 Jan 2020 09:30:13 GMT</pubDate></item><item><title>How to set up Black with Debian, PyCharm, and IdeaVim</title><link>https://karllorey.com/posts/set-up-black-pycharm-ideavim/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;I've come to like the code formatter &lt;a href="https://black.readthedocs.io/en/stable/index.html"&gt;Black&lt;/a&gt; for Python.
It's opinionated, deterministic and thus very minimalistic.
And since I'm using it on more and more projects, I wanted to integrate it into my workflow.&lt;/p&gt;
&lt;p&gt;So usually, you just install Black globally via &lt;code&gt;pip3 install black&lt;/code&gt;.
But since I use Debian which still ships with Python 3.5
this yielded some smaller challenges as Black only runs under Python 3.6+.
This post is a small tutorial on how you can use Black on Debian and integrate it into the command line, PyCharm, and IdeaVim.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://karllorey.com/posts/set-up-black-pycharm-ideavim/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Black</category><category>Docker</category><category>IdeaVim</category><category>Pycharm</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/set-up-black-pycharm-ideavim/</guid><pubDate>Sun, 28 Jul 2019 09:30:13 GMT</pubDate></item><item><title>Keeping Pandas DataFrames clean when importing JSON (with Context Managers)</title><link>https://karllorey.com/posts/keeping-pandas-dataframes-clean-importing-json/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;At &lt;a href="https://firstmomentum.vc"&gt;First Momentum&lt;/a&gt;, I do a lot of data analysis to find the most promising young startups.
As a first step, you always have to import the desired data into a Pandas DataFrame
and do some preprocessing, for example by importing JSON data from some API. 
When doing this kind of pre-processing,
you usually have a lot of temporary columns in your DataFrame that get imported but need to be dropped later in the process.
To deal with these temporary columns,
I built a custom Context Manager that keeps track of all imported columns
and deletes them when you're done.
This way, your code stays lean and you don't have to remove temporary columns yourself.
In this short article, I will show how you can keep your pre-processing clean
and use a Python ContextManager to clean up temporary columns.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://karllorey.com/posts/keeping-pandas-dataframes-clean-importing-json/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Clean Code</category><category>Machine Learning</category><category>Pandas</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/keeping-pandas-dataframes-clean-importing-json/</guid><pubDate>Sun, 03 Mar 2019 09:30:13 GMT</pubDate></item></channel></rss>