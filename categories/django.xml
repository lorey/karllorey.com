<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Karl Lorey (Posts about Django)</title><link>https://karllorey.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://karllorey.com/categories/django.xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:hello@karllorey.com"&gt;Karl Lorey&lt;/a&gt; </copyright><lastBuildDate>Wed, 26 Feb 2020 15:26:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Django in Production with mod_wsgi and Docker</title><link>https://karllorey.com/posts/django-production-docker-mod-wsgi/</link><dc:creator>Karl Lorey</dc:creator><description>&lt;div&gt;&lt;p&gt;This article will show you how to run Django in production with docker and apache2/mod_wsgi.
While there are several guides on how to do it,
I found no simple enough tutorial on how to do it
since all of the existing solutions require a lot of configuration or a custom docker image.
The solution I found is way quicker and requires close to no configuration.&lt;/p&gt;
&lt;p&gt;Guides I found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/modwsgi/"&gt;Django with Apache and mod_wsgi&lt;/a&gt; assumes you have installed everything already and requires configuration possibly unnecessary for a dockerized version&lt;/li&gt;
&lt;li&gt;&lt;a href="https://modwsgi.readthedocs.io/en/develop/"&gt;mod_wsgi&lt;/a&gt; explains how to install mod_wsgi, but not how to use Django with it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let's do this.
If you just want to see the final Dockerfile, scroll to the end of the article :)&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;I assume you have some Dockerfile with Django application setup
and run Django via the command that spins up the development server:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;python:3.6&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /code/&lt;/span&gt;

&lt;span class="c"&gt;# copy and install requirements first to leverage caching&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt /code/
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r requirements.txt

&lt;span class="c"&gt;# copy the actual code&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; . /code/

&lt;span class="k"&gt;CMD&lt;/span&gt; ./manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Step 1: Install Apache&lt;/h3&gt;
&lt;p&gt;We basically need a working Apache setup to run python code via mod_wsgi.
So in our Dockerfile, we need to install apache2 and apache2-dev.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install apache2 apache2-dev
&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Step 2: install mod_wsgi&lt;/h3&gt;
&lt;p&gt;We want to run our project within a container.
The mod_wsgi documentation says the easiest and preferred using docker
is to use mod_wsgi-express as it does not require any configuration.
mod_wsgi-express can be used as a command after you have installed it via pip.
So we need to add:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;RUN&lt;/span&gt; pip install mod_wsgi
&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Step 3: run Django inside Apache with mod_wsgi&lt;/h3&gt;
&lt;p&gt;Lastly, we simply have to run mod_wsgi-express
which will start an apache instance with our Django project.
This can be achieved via:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The wsgi.py file is auto-generated by Django's &lt;code&gt;startproject&lt;/code&gt; command and inside you app's folder,
i.e. &lt;code&gt;django-project/project_name&lt;/code&gt;.
So, to run our project within Apache after we've set-up everything in the Dockerfile,
we have to add a &lt;code&gt;CMD&lt;/code&gt; command at the end of the Dockerfile:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;CMD&lt;/span&gt; mod_wsgi-express start-server /code/connect_web/wsgi.py --user www-data --group www-data
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;--user&lt;/code&gt; and &lt;code&gt;--group&lt;/code&gt; parameters make sure Apache isn't run as root which results in errors.
If you want to find out, just run the command without them.&lt;/p&gt;
&lt;h3&gt;Final Dockerfile: Installing and running Apache and mod_wsgi within Docker&lt;/h3&gt;
&lt;p&gt;Your final Dockerfile should now look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;python:3.6&lt;/span&gt;

&lt;span class="c"&gt;# update packages&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get -qq update
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install --yes apache2 apache2-dev
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install mod_wsgi

&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir /code
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /code&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; . /code/

&lt;span class="k"&gt;CMD&lt;/span&gt; mod_wsgi-express start-server /code/project_name/wsgi.py --user www-data --group www-data
&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;If you have any problems, check the logs. Their locations are outputted when starting the container:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;web_1     | Server URL         : http://localhost:8000/
web_1     | Server Root        : /tmp/mod_wsgi-localhost:8000:0
web_1     | Server Conf        : /tmp/mod_wsgi-localhost:8000:0/httpd.conf
web_1     | Error Log File     : /tmp/mod_wsgi-localhost:8000:0/error_log (warn)
web_1     | Request Capacity   : 5 (1 process * 5 threads)
web_1     | Request Timeout    : 60 (seconds)
web_1     | Startup Timeout    : 15 (seconds)
web_1     | Queue Backlog      : 100 (connections)
web_1     | Queue Timeout      : 45 (seconds)
web_1     | Server Capacity    : 20 (event/worker), 20 (prefork)
web_1     | Server Backlog     : 500 (connections)
web_1     | Locale Setting     : en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you want to monitor them, just &lt;code&gt;tail -f&lt;/code&gt; them:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tail -f /tmp/mod_wsgi-localhost:8000:0/error_log
&lt;/code&gt;&lt;/pre&gt;


&lt;h4&gt;Permission problems&lt;/h4&gt;
&lt;p&gt;At first, I got an &lt;code&gt;Internal Server Error&lt;/code&gt; when opening the page on my machine.
After checking the logs as described above, mod_wsgi seemed to have problems with file permissions on &lt;code&gt;.logs/debug.log&lt;/code&gt;.
A simple &lt;code&gt;chown www-data /code/.logs/debug.log&lt;/code&gt; from within the container
which makes www-data the owner of the file solved it for me.&lt;/p&gt;&lt;/div&gt;</description><category>Django</category><category>Docker</category><category>Python</category><category>Tech</category><guid>https://karllorey.com/posts/django-production-docker-mod-wsgi/</guid><pubDate>Fri, 17 Jan 2020 09:30:13 GMT</pubDate></item></channel></rss>